generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  GOOGLE
  APPLE
  FACEBOOK
  LINKEDIN
  EMAIL
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  password             String?
  name                 String?
  profilePictureUrl    String?
  socialAccounts       UserSocialAccount[]
  authType             AuthType
  isEmailVerified      Boolean               @default(false)
  headline             String?
  jobTitle             String?
  connections          Connection[]          @relation("follower")
  followedConnections  Connection[]          @relation("following")
  LinkedSocialAccounts LinkedSocialAccount[]
  ratings              Rating[]              @relation("ratedUser")
  ratingsReceived      Rating[]              @relation("raterUser")
}

model Connection {
  id          Int    @id @default(autoincrement())
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}

model LinkedSocialAccount {
  id                 Int       @id @default(autoincrement())
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  platform           String
  isConnected        Boolean   @default(false)
  profileUrl         String?
  accessToken        String?   @db.Text
  refreshToken       String?   @db.Text
  accessTokenExpiry  DateTime?
  refreshTokenExpiry DateTime?

  @@unique([userId, platform])
}

model Rating {
  id              Int      @id @default(autoincrement())
  // Person who is being rated
  ratedUser       User     @relation(fields: [ratedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "ratedUser")
  ratedUserId     String
  // Person who is rating
  raterUser       User?    @relation(fields: [raterUserId], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "raterUser")
  raterUserId     String?
  professionalism Int      @default(0)
  reliability     Int      @default(0)
  communication   Int      @default(0)
  comment         String?
  createdAt       DateTime @default(now())
  anonymous       Boolean  @default(false)
}

model UserSocialAccount {
  id              String   @id @default(cuid())  
  provider        String   @unique                  
  accessToken     String

  user            User     @relation(fields: [userId], references: [id])
  userId          String
}

model VerificationCode {
  code      String   @id
  email     String
  expiresAt DateTime

  @@unique([email])
}
