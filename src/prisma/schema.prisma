generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  GOOGLE
  APPLE
  FACEBOOK
  LINKEDIN
  GITHUB
  EMAIL
  EXTERNAL
}

enum SocialAccountType {
  LINKEDIN
  GITHUB
  TWITTER
  FACEBOOK
  GITLAB
}

model User {
  id                String           @id @default(cuid())
  email             String?          @unique
  name              String?
  location          String?
  onboarded         Boolean          @default(false)
  profilePictureUrl String?
  socialAccounts    SocialAccount[]
  authType          AuthType
  isEmailVerified   Boolean          @default(false)
  headline          String?
  followers         Connection[]     @relation("followsTheUser")
  followings        Connection[]     @relation("followedByUser")
  reviewsPosted     Review[]         @relation("reviewsGivenToOtherUsers")
  reviewsReceived   Review[]         @relation("reviewsRecievedFromOtherUsers")
  joinedAt          DateTime         @default(now())
  favoriteReviews   FavoriteReview[] @relation("userFavoriteReviews")
  notifications     Notification[]   @relation("notifications")
  pushToken         PushToken[]      @relation("pushTokens")
  settings          UserSettings?
}

model Connection {
  id          Int    @id @default(autoincrement())
  follower    User   @relation("followedByUser", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId  String
  following   User   @relation("followsTheUser", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId String

  @@unique([followerId, followingId])
}

model SocialAccount {
  id          Int               @id @default(autoincrement())
  platform    SocialAccountType
  displayName String?
  email       String?
  socialId    String?
  profileUrl  String?
  pictureUrl  String?
  addedOn     DateTime          @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@index([userId, platform, profileUrl])
}

enum ReviewState {
  PENDING
  BLOCKED
  APPROVED
}

model Review {
  id              String           @id @default(cuid())
  // Person who is being rated
  postedTo        User             @relation(fields: [postedToId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "reviewsRecievedFromOtherUsers")
  postedToId      String
  // Person who is rating
  postedBy        User?            @relation(fields: [postedById], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "reviewsGivenToOtherUsers")
  postedById      String?
  professionalism Int              @default(0)
  reliability     Int              @default(0)
  communication   Int              @default(0)
  comment         String?
  createdAt       DateTime         @default(now())
  anonymous       Boolean          @default(true)
  state           ReviewState      @default(PENDING)
  favorites       FavoriteReview[] @relation("favoriteReview")
}

model FavoriteReview {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "userFavoriteReviews")
  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "favoriteReview")

  @@unique([userId, reviewId])
}

model VerificationCode {
  code      String   @id
  email     String
  expiresAt DateTime

  @@unique([email])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  body      String
  title     String
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "notifications")
  createdAt DateTime         @default(now())
  extraData Json?
}

enum NotificationType {
  CONNECTION
  REVIEW
}

model PushToken {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "pushTokens")
  userId String
  token  String @id
}

model UserSettings {
  id             String  @id @default(cuid())
  reviewsVisible Boolean @default(true)
  anonymous      Boolean @default(true)
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])
}
