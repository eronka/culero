generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  GOOGLE
  APPLE
  FACEBOOK
  LINKEDIN
  EMAIL
  EXTERNAL
}

enum SocialAccountType {
  LINKEDIN
  GITHUB
  TWITTER
  FACEBOOK
  GITLAB
}

model User {
  id                String          @id @default(cuid())
  email             String?         @unique
  name              String?
  profilePictureUrl String?
  socialAccounts    SocialAccount[]
  authType          AuthType
  isEmailVerified   Boolean         @default(false)
  headline          String?
  jobTitle          String?
  followers         Connection[]    @relation("followsTheUser")
  followings        Connection[]    @relation("followedByUser")
  ratingsPosted     Rating[]        @relation("ratingsGivenToOtherUsers")
  ratingsReceived   Rating[]        @relation("ratingsRecievedFromOtherUsers")
  joinedAt          DateTime        @default(now())
}

model Connection {
  id          Int    @id @default(autoincrement())
  follower    User   @relation("followedByUser", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId  String
  following   User   @relation("followsTheUser", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId String

  @@unique([followerId, followingId])
}

model SocialAccount {
  id         Int               @id @default(autoincrement())
  platform   SocialAccountType
  profileUrl String
  addedOn    DateTime          @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@index([userId, platform, profileUrl])
}

model Rating {
  id              Int      @id @default(autoincrement())
  // Person who is being rated
  postedTo        User     @relation(fields: [postedToId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "ratingsRecievedFromOtherUsers")
  postedToId      String
  // Person who is rating
  postedBy        User?    @relation(fields: [postedById], references: [id], onDelete: SetNull, onUpdate: Cascade, name: "ratingsGivenToOtherUsers")
  postedById      String?
  professionalism Int      @default(0)
  reliability     Int      @default(0)
  communication   Int      @default(0)
  comment         String?
  createdAt       DateTime @default(now())
  anonymous       Boolean  @default(false)
}

model VerificationCode {
  code      String   @id
  email     String
  expiresAt DateTime

  @@unique([email])
}
